@page "/"
@using EasyLotteryDomain.Models.Youtube
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Auth.OAuth2.Flows
@using Google.Apis.Auth.OAuth2.Responses
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using Google.Apis.YouTube.v3
@using System.Web
@using MiniExcelLibs
@using MiniExcelLibs.Attributes
@using Serilog
@using System.Timers
@using Microsoft.Extensions.Configuration


@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@inject IMessageService MessageService


<PageTitle>抽獎</PageTitle>
<table>
     <thead>
        <tr>
            @if(clientId!="") {
                 <th>
                     <Button Color="Color.Primary" @onclick="Authorize">YT授權</Button></th>
            }
            @* <th> <Button Color="Color.Primary" @onclick="LoadDrawPrize">匯入YT會員名單</Button></th> *@
            <th>
                 <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is6">
                    匯入YT會員名單
                </FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is8">
                    <InputFile OnChange="OnChanged"  />
                    @* <FileEdit  Changed="@OnChanged" Filter=".csv" /> *@
                </FieldBody>
                </Field>
            </th>
        </tr>
    </thead>
</table>

@if (!string.IsNullOrEmpty(accessToken))
{
    <p>Access Token: @accessToken</p>
    <p>Refresh Token: @refreshToken</p>

    <h2>Youtuber Info</h2>
    <button @onclick="GetChannelInfoAsync">Get Channel Info</button>
    @if (youtubeInfo != null)
    {
        <p>Channel Title: @youtubeInfo.ChannelTitle</p>
        <p>Channel Description: @youtubeInfo.ChannelDescription</p>
    }

    <h2>YouTube Members</h2>

    <button @onclick="GetYouTubeMembersAsync">Get YouTube Members</button>
<button @onclick="GetYouTubeMembersAsync2">Get YouTube Members2</button>
    @if (members != null)
    {
        <ul>
            @foreach (var member in members)
            {
                <li>@member.Snippet.MemberDetails.DisplayName</li>
            }
        </ul>
    }

    <h2>YouTube Memberships Levels</h2>
    <button @onclick="GetYouTubeMembershipsLevelsAsync">Get YouTube Memberships Levels</button>
    @if(membershipsLevels != null)
    {
        <ul>
            @foreach (var level in membershipsLevels)
            {
                <li>@level.Snippet.LevelDetails.DisplayName</li>
            }
        </ul>
    }
}

<Divider />

<Card>
    <CardBody>
        <CardText>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">
                    通關密語
                </FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is2">
                    <TextEdit @bind-Text="@url" Placeholder="請輸入直播網址" ></TextEdit>
                    <TextEdit @bind-Text="@keyWorld" Placeholder="請輸入通關密語" ></TextEdit>
                </FieldBody>
                 <FieldBody ColumnSize="ColumnSize.Is2">
                     <Switch TValue="bool" Checked="@catchChat" CheckedChanged="@OnCatchChatChanged">停止擷取</Switch>
                </FieldBody>
            </Field>
        </CardText>
    </CardBody>
</Card>


<Divider />

<Card>
    <CardBody>
        <CardText>
            <Field Horizontal>
                <FieldLabel ColumnSize="ColumnSize.Is2">
                    獎項名稱
                </FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is2">
                    <TextEdit @bind-Text="@Prize" Placeholder="請輸入獎項名稱" ></TextEdit>
                </FieldBody>
                 <FieldBody ColumnSize="ColumnSize.Is2">
                     <Button Color="Color.Primary" @onclick="AddPrize">新增獎項</Button>
                </FieldBody>
            </Field>
        </CardText>
    </CardBody>
</Card>


<Divider />

@if (Participants.Any())
{
    <Card>
        <CardBody>
            <CardTitle>
                <h2>設定中獎倍率</h2>
            </CardTitle>
            <CardText>
                    <div>
                        @foreach (var entry in levelRate)
                        {
                            <div>
                                <input type="text" value="@entry.Key" disabled />
                                <input type="number" @bind="levelRate[entry.Key]" min="1" />
                            </div>
                        }
                    </div>
            </CardText>
        </CardBody>
        <CardFooter>
            <Button Color="Color.Primary" @onclick="LoadDrawPrize">確認設定倍率</Button>
        </CardFooter>
    </Card>

    <Divider />
 }  

<Button Size="Size.Small" Color="Color.Primary" Clicked="@OnDrawPrize">抽獎</Button>
<Table FullWidth Striped Hoverable Bordered Responsive>
    <TableHeader>
        <TableRow>
            <TableHeaderCell>獎項</TableHeaderCell>
            <TableHeaderCell>參加者</TableHeaderCell>
            <TableHeaderCell>得獎名單</TableHeaderCell>
        </TableRow>
    </TableHeader>
    <TableBody>
        <TableRow>
                <TableRowCell>
                    <ul>
                        @foreach (var prize in Prizes)
                        {
                            <li>@prize</li>
                        }
                    </ul>
                </TableRowCell>
                <TableRowCell>
                    
                    <ul>
                        @foreach (var participant in Participants)
                        {
                            <li style="@(Winners.Any(x=>x.Member.Name == participant.Name) ? "color: gray;" : "color: black;")">(@participant.Level)@participant.Name</li>
                        }
                    </ul>
                </TableRowCell>
                <TableRowCell>
                    @if (Winners.Any())
                    {
                        <ul>
                            @foreach (var winner in Winners)
                            {
                                <li>恭喜 <span style="color:red;">(@winner.Member.Level)@winner.Member.Name</span> 獲得了 <span style="color:red;">@winner.Prize </span> </li>
                            }
                        </ul>
                    }
                </TableRowCell>
            </TableRow>
    </TableBody>
</Table>

<Toaster>
    <Toast @bind-Visible="@toastVisible">
        
        <ToastBody>
           @toastMessage
        </ToastBody>
    </Toast>
</Toaster>

@code {

    private List<Google.Apis.YouTube.v3.Data.Member> members;

    private List<Google.Apis.YouTube.v3.Data.MembershipsLevel> membershipsLevels;
    private static readonly string[] Scopes = { YouTubeService.Scope.YoutubeReadonly, "https://www.googleapis.com/auth/youtube.channel-memberships.creator"};
    
    private string clientId = "";
    private string clientSecret= "" ;
    private string redirectUri= "";
    private string authorizationEndpoint = "https://accounts.google.com/o/oauth2/v2/auth";
    private string tokenEndpoint = "https://oauth2.googleapis.com/token";

    // Mupltiple scopes can be added
    private string scope = "https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtube.channel-memberships.creator";
    private string accessToken= "";

    private string refreshToken= "";

    private string url = "";

    private string keyWorld = "";
    private bool catchChat = false;

    private string toastMessage = "";

    private bool toastVisible = false;
    private YoutubeInfo youtubeInfo = new YoutubeInfo();

    private YouTubeServiceHelper youTubeServiceHelper = null;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        if (queryParams["code"] != null)
        {
            await ExchangeCodeForTokensAsync(queryParams["code"]!);
        }

        if(youTubeServiceHelper == null)
        {
            var apiKey =  Configuration.GetValue<string>("YouTubeApi:ApiKey");
            Console.WriteLine("apiKey:" + apiKey);
            youTubeServiceHelper = new YouTubeServiceHelper(Configuration);
        }
    }

    private void Authorize()
    {
        var authorizationUrl = $"{authorizationEndpoint}?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&scope={scope}&access_type=offline&include_granted_scopes=true&prompt=consent";
        NavigationManager.NavigateTo(authorizationUrl, forceLoad: true);
    }

    private async Task ExchangeCodeForTokensAsync(string code)
    {
        var initializer = new GoogleAuthorizationCodeFlow.Initializer
        {
            ClientSecrets = new ClientSecrets
            {
                ClientId = clientId,
                ClientSecret = clientSecret
            },
        };

        var flow = new GoogleAuthorizationCodeFlow(initializer);

        var token = await flow.ExchangeCodeForTokenAsync("user", code, redirectUri, CancellationToken.None);

        accessToken = token.AccessToken;
        refreshToken = token.RefreshToken;
    }

    private async Task GetYouTubeMembersAsync2()
    {
      try
        {
             var initializer = new GoogleAuthorizationCodeFlow.Initializer
            {
                ClientSecrets = new ClientSecrets
                {
                    ClientId = clientId,
                    ClientSecret = clientSecret
                }
            };

            var flow = new GoogleAuthorizationCodeFlow(initializer);
            var userCredential = new UserCredential(flow, 
                    "user", 
                    new TokenResponse { AccessToken = accessToken, RefreshToken = refreshToken }
                );
        
            var youtubeService = new YouTubeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = userCredential,
                ApplicationName = "YourAppName"
            });

            var request = youtubeService.Members.List("snippet");

            var response = await request.ExecuteAsync();
            members = response.Items.ToList();   
            accessToken = userCredential.Token.AccessToken;
            refreshToken = userCredential.Token.RefreshToken;
        }
        catch (Exception ex)
        {
            Log.Information("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetYouTubeMembersAsync()
    {
      try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://youtube.googleapis.com/youtube/v3/members");

                if (response.IsSuccessStatusCode)
                {
                    var resp = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.MemberListResponse>();
                    members = resp.Items.ToList();
                }
                else
                {
                    Log.Information($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Log.Information("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetYouTubeMembershipsLevelsAsync()
    {
      try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://youtube.googleapis.com/youtube/v3/membershipsLevels");

                if (response.IsSuccessStatusCode)
                {
                    var resp = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.MembershipsLevelListResponse>();
                    membershipsLevels = resp.Items.ToList();
                }
                else
                {
                    Log.Information($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Log.Information("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetChannelInfoAsync() 
    {
        try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true");

                if (response.IsSuccessStatusCode)
                {
                    var chs = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.ChannelListResponse>();
                    youtubeInfo = new YoutubeInfo
                    {
                        ChannelTitle = chs.Items[0].Snippet.Title,
                        ChannelDescription = chs.Items[0].Snippet.Description
                    };
                    
                }
                else
                {
                    Log.Information($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Log.Information("Error retrieving channel info: " + ex.Message);
        }
    }

    public record YoutubeMemberInfo
    {
         [ExcelColumnName("會員")]
        public string Name { get; init; }

         [ExcelColumnName("連結到個人資料")]
        public string Link { get; init; }

         [ExcelColumnName("目前級別")]
        public string Level { get; init; }
    }

    // 得獎人
    public record Participant
    {
        public string Name { get; init; }

          public string Level { get; init; }

        public bool IsWinner { get; set; }
    }

    // 得獎者
    public record Winner
    {
        public Participant Member { get; init; }  

        public string Prize { get; init; }

    }


    // 獎項
    private string Prize { get; set; }
    // 獎項
    private List<string> Prizes {get;set;} = new();
    
    // 參加者
    private List<Participant> Participants {get;set;} = new();
    
    // 得獎名單
    private List<Winner> Winners {get;set;} = new();

    // 會員等級對應倍率
    private Dictionary<string, int> levelRate = new Dictionary<string, int>(); 


    private List<YoutubeMemberInfo> YTMembers = new();

    // 載入抽獎
    private void LoadDrawPrize()
    {
       
        // 處理會員等級對應
        // 會員等級 ｜ 倍率
        foreach (var level in YTMembers.Select(x => x.Level).Distinct())
        {
            if (!levelRate.ContainsKey(level))
            {
                levelRate.Add(level, 1);
            }
        }

        // 載入參加者
        // Participants 資料為各會員資料＊會員等級的倍率 ＝ 總參加者
        // 使用Linq
        Participants = YTMembers.SelectMany(x => Enumerable.Repeat(new Participant { Name = x.Name, Level= x.Level, IsWinner = false }, (int)levelRate[x.Level])).ToList();
    }

    // 抽獎
    private void OnDrawPrize()
    {
        if (Prizes.Any() && Participants.Any())
        {
           
            // 打亂順序並取得第一個
            var winner = Participants.Where(o=>o.IsWinner == false).OrderBy(o => Guid.NewGuid()).FirstOrDefault();
            if (winner == null)
            {
                // 跳出訊息表示已經抽完
                return;
            }
            winner.IsWinner = true;
            // 將獲勝者添加到得獎名單
            Winners.Add(new Winner { Member = winner, Prize = $"{Prizes.First().ToString()}"});
            // 移除已經抽過的獎項
            Prizes.RemoveAt(0);
        }


    }

    // 新增獎項
    private void AddPrize()
    {
        if (string.IsNullOrEmpty(Prize.Trim()))
        {
            return;
        }

        Prizes.Add(Prize);
    }

    async Task OnChanged(InputFileChangeEventArgs e)
    {
        try
        {
            Log.Information("OnChanged");
            // A stream is going to be the destination stream we're writing to.
            using (var stream = new MemoryStream())
            {
                // Here we're telling the FileEdit where to write the upload result
                await e.File.OpenReadStream().CopyToAsync(stream);

                // Once we reach this line it means the file is fully uploaded.
                // In this case we're going to offset to the beginning of file
                // so we can read it.
                stream.Seek(0, SeekOrigin.Begin);

                var rows = stream.Query<YoutubeMemberInfo>(excelType: ExcelType.CSV).ToList();

                YTMembers = rows.Select(x => new YoutubeMemberInfo { Name = x.Name, Level = x.Level }).ToList();
                LoadDrawPrize();
            }
        }
        catch ( Exception exc )
        {
            Log.Error( exc, "Error reading file" );
            Log.Information(exc.Message);
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    // 擷取聊天室
    async Task OnCatchChatChanged( bool value )
    {
        catchChat = value;
        Console.WriteLine( $"OnCatchChatChanged: {value}" );
        if (catchChat)
        {
          await  StartCatchChat();
        }
        else
        {
            StopCatchChat();
        }
    }

    private Timer timer;

    private DateTimeOffset lastMessageTime = DateTime.Now;

    private string chatID = "";
    // 開始每 3 秒顯示一次訊息
    private async Task  StartCatchChat()
    {
        Console.WriteLine("StartMessage");
        // 取得直播聊天室 ID
        chatID = await  youTubeServiceHelper.GetLiveChatIDFromLiveUrlAsync(url) ?? "" ;
        if(string.IsNullOrEmpty(chatID))
        {
            toastMessage = "無法取得聊天室資訊";
            toastVisible = true;
            StateHasChanged();
            return;
        }

        // 重設最後訊息時間
        lastMessageTime = DateTime.Now;
        timer = new Timer(5000); // 設置每 5 秒觸發一次
        timer.Elapsed += OnTimerTick;
        timer.Start();
    }

    // 停止訊息顯示
    private void StopCatchChat()
    {
        Console.WriteLine("StopMessage");
        if (timer != null)
        {
            timer.Stop();
            timer.Dispose();
        }
    }

    // 每次 Timer 觸發時顯示訊息
    private void OnTimerTick(object? source, ElapsedEventArgs e)
    {
        InvokeAsync(async() =>
        {
            Console.WriteLine("DisplayMessage");

         

            var chatMessages = await youTubeServiceHelper.ListLiveChatMessageAsync(chatID);
            var message = chatMessages.OrderByDescending(x => x.Snippet.PublishedAtDateTimeOffset).FirstOrDefault();
            if (message != null)
            {
                Console.WriteLine($"PublishedAtDateTimeOffset: { message.Snippet.PublishedAtDateTimeOffset}");
                 Console.WriteLine($"lastMessageTime: { lastMessageTime}");

                toastMessage = $"{message.AuthorDetails.DisplayName}:{ message.Snippet.DisplayMessage}";
                lastMessageTime = message.Snippet.PublishedAtDateTimeOffset ?? lastMessageTime;
            }
            else
            {
                toastMessage = "無訊息";
            }
            toastVisible = true; 
            StateHasChanged(); // 更新 UI
        });
    }

}
