@page "/"
@using EasyLotteryDomain.Models.Youtube
@using Google.Apis.Auth.OAuth2
@using Google.Apis.Auth.OAuth2.Flows
@using Google.Apis.Auth.OAuth2.Responses
@using Google.Apis.Services
@using Google.Apis.Util.Store
@using Google.Apis.YouTube.v3
@using System.Web
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration

<PageTitle>Home</PageTitle>
<button @onclick="Authorize">授權</button>

@if (!string.IsNullOrEmpty(accessToken))
{
    <p>Access Token: @accessToken</p>
    <p>Refresh Token: @refreshToken</p>

    <h2>Youtuber Info</h2>
    <button @onclick="GetChannelInfoAsync">Get Channel Info</button>
    @if (youtubeInfo != null)
    {
        <p>Channel Title: @youtubeInfo.ChannelTitle</p>
        <p>Channel Description: @youtubeInfo.ChannelDescription</p>
    }

    <h2>YouTube Members</h2>

    <button @onclick="GetYouTubeMembersAsync">Get YouTube Members</button>
<button @onclick="GetYouTubeMembersAsync2">Get YouTube Members2</button>
    @if (members != null)
    {
        <ul>
            @foreach (var member in members)
            {
                <li>@member.Snippet.MemberDetails.DisplayName</li>
            }
        </ul>
    }

    <h2>YouTube Memberships Levels</h2>
    <button @onclick="GetYouTubeMembershipsLevelsAsync">Get YouTube Memberships Levels</button>
    @if(membershipsLevels != null)
    {
        <ul>
            @foreach (var level in membershipsLevels)
            {
                <li>@level.Snippet.LevelDetails.DisplayName</li>
            }
        </ul>
    }
}

@code {

    private List<Google.Apis.YouTube.v3.Data.Member> members;

    private List<Google.Apis.YouTube.v3.Data.MembershipsLevel> membershipsLevels;
    private static readonly string[] Scopes = { YouTubeService.Scope.YoutubeReadonly, "https://www.googleapis.com/auth/youtube.channel-memberships.creator"};
    
    private string clientId = "";
    private string clientSecret= "" ;
    private string redirectUri= "";
    private string authorizationEndpoint = "https://accounts.google.com/o/oauth2/v2/auth";
    private string tokenEndpoint = "https://oauth2.googleapis.com/token";

    // Mupltiple scopes can be added
    private string scope = "https://www.googleapis.com/auth/youtube.readonly https://www.googleapis.com/auth/youtube.channel-memberships.creator";
    private string accessToken= "";

    private string refreshToken= "";

    private YoutubeInfo youtubeInfo = new YoutubeInfo();

    protected override async Task OnInitializedAsync()
    {
        // init value
        clientId = Configuration.GetSection("YouTubeApi:ClientId").Value!;
        clientSecret = Configuration.GetSection("YouTubeApi:ClientSecret").Value!;
        redirectUri = Configuration.GetSection("YouTubeApi:RedirectUri").Value!;

        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        if (queryParams["code"] != null)
        {
            await ExchangeCodeForTokensAsync(queryParams["code"]!);
        }
    }

    private void Authorize()
    {
        var authorizationUrl = $"{authorizationEndpoint}?response_type=code&client_id={clientId}&redirect_uri={redirectUri}&scope={scope}&access_type=offline&include_granted_scopes=true&prompt=consent";
        NavigationManager.NavigateTo(authorizationUrl, forceLoad: true);
    }

    private async Task ExchangeCodeForTokensAsync(string code)
    {
        var initializer = new GoogleAuthorizationCodeFlow.Initializer
        {
            ClientSecrets = new ClientSecrets
            {
                ClientId = clientId,
                ClientSecret = clientSecret
            },
        };

        var flow = new GoogleAuthorizationCodeFlow(initializer);

        var token = await flow.ExchangeCodeForTokenAsync("user", code, redirectUri, CancellationToken.None);

        accessToken = token.AccessToken;
        refreshToken = token.RefreshToken;
    }

    private async Task GetYouTubeMembersAsync2()
    {
      try
        {
             var initializer = new GoogleAuthorizationCodeFlow.Initializer
            {
                ClientSecrets = new ClientSecrets
                {
                    ClientId = clientId,
                    ClientSecret = clientSecret
                }
            };

            var flow = new GoogleAuthorizationCodeFlow(initializer);
            var userCredential = new UserCredential(flow, 
                    "user", 
                    new TokenResponse { AccessToken = accessToken, RefreshToken = refreshToken }
                );
        
            var youtubeService = new YouTubeService(new BaseClientService.Initializer
            {
                HttpClientInitializer = userCredential,
                ApplicationName = "YourAppName"
            });

            var request = youtubeService.Members.List("snippet");

            var response = await request.ExecuteAsync();
            members = response.Items.ToList();   
            accessToken = userCredential.Token.AccessToken;
            refreshToken = userCredential.Token.RefreshToken;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetYouTubeMembersAsync()
    {
      try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://youtube.googleapis.com/youtube/v3/members");

                if (response.IsSuccessStatusCode)
                {
                    var resp = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.MemberListResponse>();
                    members = resp.Items.ToList();
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetYouTubeMembershipsLevelsAsync()
    {
      try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://youtube.googleapis.com/youtube/v3/membershipsLevels");

                if (response.IsSuccessStatusCode)
                {
                    var resp = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.MembershipsLevelListResponse>();
                    membershipsLevels = resp.Items.ToList();
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error retrieving channel info: " + ex.Message);
        }
    }

    private async Task GetChannelInfoAsync() {
        try
        {
            // 创建 HttpClient 实例
            using (var httpClient = new HttpClient())
            {
                httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);

                // 请求 YouTube 数据
                var response = await httpClient.GetAsync("https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true");

                if (response.IsSuccessStatusCode)
                {
                    var chs = await response.Content.ReadFromJsonAsync<Google.Apis.YouTube.v3.Data.ChannelListResponse>();
                    youtubeInfo = new YoutubeInfo
                    {
                        ChannelTitle = chs.Items[0].Snippet.Title,
                        ChannelDescription = chs.Items[0].Snippet.Description
                    };
                    
                }
                else
                {
                    Console.WriteLine($"Error: {response.StatusCode}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error retrieving channel info: " + ex.Message);
        }
    }
}
